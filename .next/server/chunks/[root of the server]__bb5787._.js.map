{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/storefront-shopify.ts"],"sourcesContent":["import { createStorefrontApiClient } from \"@shopify/storefront-api-client\";\n\nconst storeFrontShopify = createStorefrontApiClient({\n    storeDomain: process.env.NEXT_PUBLIC_STORE_DOMAIN!,\n    apiVersion: process.env.NEXT_PUBLIC_API_VERSION!,\n    publicAccessToken: process.env.NEXT_PUBLIC_STORE_API_TOKEN!,\n});\n\nexport default storeFrontShopify;\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,oBAAoB,CAAA,GAAA,kMAAA,CAAA,4BAAyB,AAAD,EAAE;IAChD,WAAW;IACX,UAAU;IACV,iBAAiB;AACrB;uCAEe"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/cartImpl.ts"],"sourcesContent":["import { CartCreate } from \"@/app/types/cart\";\nimport { CartService } from \"./cart\";\nimport storeFrontShopify from \"./storefront-shopify\";\n\nexport function createCartServiceInstance(): CartService {\n    return new CartServiceImpl();\n}\n\nclass CartServiceImpl implements CartService {\n    async createCart(buyerEmail: string): Promise<CartCreate | undefined> {\n        const CREATE_CART = `\n            mutation CartCreate($email: String!) {\n                cartCreate(input: { buyerIdentity: { email: $email } }) {\n                    cart {\n                        checkoutUrl\n                        createdAt\n                        id\n                        note\n                        totalQuantity\n                        updatedAt\n                    }\n                }\n            }\n        `;\n\n        const response = await storeFrontShopify.request(CREATE_CART, { variables: { email: buyerEmail } });\n        console.info(\"==============>\", response.data);\n        return response.data?.cartCreate;\n    }\n}\n"],"names":[],"mappings":";;;AAEA;;AAEO,SAAS;IACZ,OAAO,IAAI;AACf;AAEA,MAAM;IACF,MAAM,WAAW,UAAkB,EAAmC;QAClE,MAAM,cAAc,CAAC;;;;;;;;;;;;;QAarB,CAAC;QAED,MAAM,WAAW,MAAM,2JAAA,CAAA,UAAiB,CAAC,OAAO,CAAC,aAAa;YAAE,WAAW;gBAAE,OAAO;YAAW;QAAE;QACjG,QAAQ,IAAI,CAAC,mBAAmB,SAAS,IAAI;QAC7C,OAAO,SAAS,IAAI,EAAE;IAC1B;AACJ"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/cart.ts"],"sourcesContent":["import { CartCreate } from \"@/app/types/cart\";\nimport { createCartServiceInstance } from \"./cartImpl\";\n\nexport interface CartService {\n    createCart: (buyerEmail: string) => Promise<CartCreate | undefined>;\n}\n\nconst cartService: CartService = createCartServiceInstance();\nexport default cartService;\n"],"names":[],"mappings":";;;AACA;;AAMA,MAAM,cAA2B,CAAA,GAAA,8IAAA,CAAA,4BAAyB,AAAD;uCAC1C"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/admin-shopify.ts"],"sourcesContent":["import { createAdminApiClient } from \"@shopify/admin-api-client\";\n\nconst adminShopify = createAdminApiClient({\n    storeDomain: process.env.NEXT_PUBLIC_STORE_DOMAIN!,\n    apiVersion: process.env.NEXT_PUBLIC_API_VERSION!,\n    accessToken: process.env.NEXT_PUBLIC_ADMIN_API_TOKEN!,\n});\n\nexport default adminShopify;\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,eAAe,CAAA,GAAA,mLAAA,CAAA,uBAAoB,AAAD,EAAE;IACtC,WAAW;IACX,UAAU;IACV,WAAW;AACf;uCAEe"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/customerImpl.ts"],"sourcesContent":["import { AccountSignUp } from \"../../types/accountSignUp\";\nimport { Customer } from \"../../types/customer\";\nimport { CustomerAccessTokenCreate } from \"../../types/customerAccessToken\";\nimport { CustomerAccessTokenDelete } from \"../../types/customerAccessTokenDelete\";\nimport { CustomerCreate } from \"../../types/customerCreate\";\nimport { CustomerService } from \"./customer\";\nimport storeFrontShopify from \"./storefront-shopify\";\nimport adminShopify from \"./admin-shopify\";\n\nexport function createCustomerServiceInstance(): CustomerService {\n    return new CustomerServiceImpl();\n}\n\nclass CustomerServiceImpl implements CustomerService {\n    async createAccessToken(email: string, password: string): Promise<CustomerAccessTokenCreate | undefined> {\n        const CUSTOMER_ACCESS_TOKEN_CREATE = `\n            mutation CustomerAccessTokenCreate($email: String!, $password: String!) {\n                customerAccessTokenCreate(\n                    input: { email: $email, password: $password }\n                ) {\n                    customerAccessToken {\n                        accessToken\n                        expiresAt\n                    }\n                    customerUserErrors {\n                        code\n                        field\n                        message\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await storeFrontShopify.request(CUSTOMER_ACCESS_TOKEN_CREATE, {\n            variables: { email, password },\n        });\n\n        return response?.data?.customerAccessTokenCreate;\n    }\n\n    async deleteAccessToken(customerAccessToken: string): Promise<CustomerAccessTokenDelete | undefined> {\n        const CUSTOMER_ACCESS_TOKEN_DELETE = `\n            mutation CustomerAccessTokenDelete($customerAccessToken: String!) {\n                customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n                    deletedAccessToken\n                    deletedCustomerAccessTokenId\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await storeFrontShopify.request(CUSTOMER_ACCESS_TOKEN_DELETE, {\n            variables: { customerAccessToken: customerAccessToken },\n        });\n\n        return response?.data?.customerAccessTokenDelete;\n    }\n\n    async createCustomer(account: AccountSignUp): Promise<CustomerCreate> {\n        const CREATE_CUSTOMER = `\n            mutation CustomerCreate($email: String!, $password: String!, $phone: String!) {\n                customerCreate(\n                    input: { email: $email, password: $password, phone: $phone }\n                ) {\n                    customer {\n                        acceptsMarketing\n                        createdAt\n                        displayName\n                        email\n                        firstName\n                        id\n                        lastName\n                        numberOfOrders\n                        phone\n                        tags\n                        updatedAt\n                    }\n                    customerUserErrors {\n                        code\n                        field\n                        message\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await storeFrontShopify.request(CREATE_CUSTOMER, {\n            variables: { email: account.email, password: account.password, phone: account.phone },\n        });\n\n        return response?.data?.customerCreate;\n    }\n\n    async updateCustomerCart(customerID: string, cartID: string): Promise<any> {\n        const UPDATE_CUSTOMER_CART = `\n            mutation CustomerUpdate($customerID: ID!, $cartID: String!) {\n                customerUpdate(\n                    input: { tags: [$cartID], id: $customerID }\n                ) {\n                    customer {\n                        id\n                        tags\n                    }\n                }\n            }\n        `;\n\n        const response = await adminShopify.request(UPDATE_CUSTOMER_CART, {\n            variables: { customerID: customerID, cartID: cartID },\n        });\n\n        console.info(\"error: ====>\", response.errors);\n\n        return response.data;\n    }\n\n    async getCustomer(customerAccessToken: string): Promise<Customer | null> {\n        const GET_CUSTOMER = `\n            query Customer($customerAccessToken: String!) {\n                customer(customerAccessToken: $customerAccessToken) {\n                    acceptsMarketing\n                    createdAt\n                    displayName\n                    email\n                    firstName\n                    id\n                    lastName\n                    numberOfOrders\n                    phone\n                    tags\n                    updatedAt\n                }\n            }\n        `;\n\n        const response = await storeFrontShopify.fetch(GET_CUSTOMER, { variables: { customerAccessToken } });\n        const { data } = await response.json();\n\n        return data.customer;\n    }\n}\n"],"names":[],"mappings":";;;AAMA;AACA;;;AAEO,SAAS;IACZ,OAAO,IAAI;AACf;AAEA,MAAM;IACF,MAAM,kBAAkB,KAAa,EAAE,QAAgB,EAAkD;QACrG,MAAM,+BAA+B,CAAC;;;;;;;;;;;;;;;;;;;;QAoBtC,CAAC;QAED,MAAM,WAAW,MAAM,2JAAA,CAAA,UAAiB,CAAC,OAAO,CAAC,8BAA8B;YAC3E,WAAW;gBAAE;gBAAO;YAAS;QACjC;QAEA,OAAO,UAAU,MAAM;IAC3B;IAEA,MAAM,kBAAkB,mBAA2B,EAAkD;QACjG,MAAM,+BAA+B,CAAC;;;;;;;;;;;QAWtC,CAAC;QAED,MAAM,WAAW,MAAM,2JAAA,CAAA,UAAiB,CAAC,OAAO,CAAC,8BAA8B;YAC3E,WAAW;gBAAE,qBAAqB;YAAoB;QAC1D;QAEA,OAAO,UAAU,MAAM;IAC3B;IAEA,MAAM,eAAe,OAAsB,EAA2B;QAClE,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA6BzB,CAAC;QAED,MAAM,WAAW,MAAM,2JAAA,CAAA,UAAiB,CAAC,OAAO,CAAC,iBAAiB;YAC9D,WAAW;gBAAE,OAAO,QAAQ,KAAK;gBAAE,UAAU,QAAQ,QAAQ;gBAAE,OAAO,QAAQ,KAAK;YAAC;QACxF;QAEA,OAAO,UAAU,MAAM;IAC3B;IAEA,MAAM,mBAAmB,UAAkB,EAAE,MAAc,EAAgB;QACvE,MAAM,uBAAuB,CAAC;;;;;;;;;;;QAW9B,CAAC;QAED,MAAM,WAAW,MAAM,sJAAA,CAAA,UAAY,CAAC,OAAO,CAAC,sBAAsB;YAC9D,WAAW;gBAAE,YAAY;gBAAY,QAAQ;YAAO;QACxD;QAEA,QAAQ,IAAI,CAAC,gBAAgB,SAAS,MAAM;QAE5C,OAAO,SAAS,IAAI;IACxB;IAEA,MAAM,YAAY,mBAA2B,EAA4B;QACrE,MAAM,eAAe,CAAC;;;;;;;;;;;;;;;;QAgBtB,CAAC;QAED,MAAM,WAAW,MAAM,2JAAA,CAAA,UAAiB,CAAC,KAAK,CAAC,cAAc;YAAE,WAAW;gBAAE;YAAoB;QAAE;QAClG,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,OAAO,KAAK,QAAQ;IACxB;AACJ"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/server/customer.ts"],"sourcesContent":["import { AccountSignUp } from \"../../types/accountSignUp\";\nimport { Customer } from \"../../types/customer\";\nimport { CustomerAccessTokenCreate } from \"../../types/customerAccessToken\";\nimport { CustomerAccessTokenDelete } from \"../../types/customerAccessTokenDelete\";\nimport { CustomerCreate } from \"../../types/customerCreate\";\nimport { createCustomerServiceInstance } from \"./customerImpl\";\n\nexport interface CustomerService {\n    createAccessToken: (email: string, password: string) => Promise<CustomerAccessTokenCreate | undefined>;\n    deleteAccessToken: (customerAccessToken: string) => Promise<CustomerAccessTokenDelete | undefined>;\n    createCustomer: (account: AccountSignUp) => Promise<CustomerCreate>;\n    updateCustomerCart: (customerID: string, cartID: string) => Promise<any>;\n    getCustomer: (customerAccessToken: string) => Promise<Customer | null>;\n}\n\nconst customerService: CustomerService = createCustomerServiceInstance();\nexport default customerService;\n"],"names":[],"mappings":";;;AAKA;;AAUA,MAAM,kBAAmC,CAAA,GAAA,kJAAA,CAAA,gCAA6B,AAAD;uCACtD"}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 304, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/api/auth/sign-up/route.ts"],"sourcesContent":["import cartService from \"@/app/services/server/cart\";\nimport customerService from \"@/app/services/server/customer\";\nimport { CartCreate } from \"@/app/types/cart\";\nimport { CustomerCreate } from \"@/app/types/customerCreate\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(request: NextRequest) {\n    const { email, password, phone } = await request.json();\n\n    const customerEntity: CustomerCreate | undefined = await customerService.createCustomer({ email, password, phone });\n\n    console.info(\"customerEntity\", customerEntity);\n    console.info(\"customerEntity.customer\", customerEntity?.customer);\n\n    if (customerEntity.customer) {\n        const { id: customerID, email: customerEmail } = customerEntity.customer;\n\n        const cartEntity: CartCreate | undefined = await cartService.createCart(customerEmail);\n\n        console.info(\"cartEntity\", cartEntity);\n\n        if (cartEntity?.cart) {\n            const cartID: string = cartEntity.cart.id;\n            const customerCart: any = await customerService.updateCustomerCart(customerID, cartID);\n            console.info(\"customerCart\", customerCart);\n        }\n    }\n\n    return NextResponse.json(customerEntity);\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAGA;;;;AAEO,eAAe,KAAK,OAAoB;IAC3C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;IAErD,MAAM,iBAA6C,MAAM,8IAAA,CAAA,UAAe,CAAC,cAAc,CAAC;QAAE;QAAO;QAAU;IAAM;IAEjH,QAAQ,IAAI,CAAC,kBAAkB;IAC/B,QAAQ,IAAI,CAAC,2BAA2B,gBAAgB;IAExD,IAAI,eAAe,QAAQ,EAAE;QACzB,MAAM,EAAE,IAAI,UAAU,EAAE,OAAO,aAAa,EAAE,GAAG,eAAe,QAAQ;QAExE,MAAM,aAAqC,MAAM,0IAAA,CAAA,UAAW,CAAC,UAAU,CAAC;QAExE,QAAQ,IAAI,CAAC,cAAc;QAE3B,IAAI,YAAY,MAAM;YAClB,MAAM,SAAiB,WAAW,IAAI,CAAC,EAAE;YACzC,MAAM,eAAoB,MAAM,8IAAA,CAAA,UAAe,CAAC,kBAAkB,CAAC,YAAY;YAC/E,QAAQ,IAAI,CAAC,gBAAgB;QACjC;IACJ;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B"}},
    {"offset": {"line": 334, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}