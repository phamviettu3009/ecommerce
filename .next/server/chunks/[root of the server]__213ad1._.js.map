{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/storefront.ts"],"sourcesContent":["import { createStorefrontApiClient } from \"@shopify/storefront-api-client\";\n\nconst client = createStorefrontApiClient({\n    storeDomain: process.env.NEXT_PUBLIC_STORE_DOMAIN!,\n    apiVersion: process.env.NEXT_PUBLIC_API_VERSION!,\n    publicAccessToken: process.env.NEXT_PUBLIC_API_KEY!,\n});\n\nexport default client;\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,SAAS,CAAA,GAAA,kMAAA,CAAA,4BAAyB,AAAD,EAAE;IACrC,WAAW;IACX,UAAU;IACV,iBAAiB;AACrB;uCAEe"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/customerImpl.ts"],"sourcesContent":["import { AccountSignUp } from \"../types/accountSignUp\";\nimport { CustomerAccessTokenCreate } from \"../types/customerAccessToken\";\nimport { CustomerAccessTokenDelete } from \"../types/customerAccessTokenDelete\";\nimport { CustomerService } from \"./customer\";\nimport client from \"./storefront\";\n\nexport function createCustomerServiceInstance(): CustomerService {\n    return new CustomerServiceImpl();\n}\n\nclass CustomerServiceImpl implements CustomerService {\n    async createAccessToken(email: string, password: string): Promise<CustomerAccessTokenCreate | undefined> {\n        const CUSTOMER_ACCESS_TOKEN_CREATE = `\n            mutation CustomerAccessTokenCreate($email: String!, $password: String!) {\n                customerAccessTokenCreate(\n                    input: { email: $email, password: $password }\n                ) {\n                    customerAccessToken {\n                        accessToken\n                        expiresAt\n                    }\n                    customerUserErrors {\n                        code\n                        field\n                        message\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await client.request(CUSTOMER_ACCESS_TOKEN_CREATE, {\n            variables: { email, password },\n        });\n\n        return response?.data?.customerAccessTokenCreate;\n    }\n\n    async deleteAccessToken(customerAccessToken: string): Promise<CustomerAccessTokenDelete | undefined> {\n        const CUSTOMER_ACCESS_TOKEN_DELETE = `\n            mutation CustomerAccessTokenDelete($customerAccessToken: String!) {\n                customerAccessTokenDelete(customerAccessToken: $customerAccessToken) {\n                    deletedAccessToken\n                    deletedCustomerAccessTokenId\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await client.request(CUSTOMER_ACCESS_TOKEN_DELETE, {\n            variables: { customerAccessToken: customerAccessToken },\n        });\n\n        console.info(\"====> \", response.data);\n\n        return response?.data?.customerAccessTokenDelete;\n    }\n\n    async createCustomer(account: AccountSignUp): Promise<any> {\n        const CREATE_CUSTOMER = `\n            mutation CustomerCreate($email: String!, $password: String!, $phone: String!) {\n                customerCreate(\n                    input: { email: $email, password: $password, phone: $phone }\n                ) {\n                    customer {\n                        acceptsMarketing\n                        createdAt\n                        displayName\n                        email\n                        firstName\n                        id\n                        lastName\n                        numberOfOrders\n                        phone\n                        tags\n                        updatedAt\n                    }\n                    customerUserErrors {\n                        code\n                        field\n                        message\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await client.request(CREATE_CUSTOMER, {\n            variables: { email: account.email, password: account.password, phone: account.phone },\n        });\n\n        console.info(\"======>\", response.data);\n\n        return response?.data?.customerCreate;\n    }\n}\n"],"names":[],"mappings":";;;AAIA;;AAEO,SAAS;IACZ,OAAO,IAAI;AACf;AAEA,MAAM;IACF,MAAM,kBAAkB,KAAa,EAAE,QAAgB,EAAkD;QACrG,MAAM,+BAA+B,CAAC;;;;;;;;;;;;;;;;;;;;QAoBtC,CAAC;QAED,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,8BAA8B;YAChE,WAAW;gBAAE;gBAAO;YAAS;QACjC;QAEA,OAAO,UAAU,MAAM;IAC3B;IAEA,MAAM,kBAAkB,mBAA2B,EAAkD;QACjG,MAAM,+BAA+B,CAAC;;;;;;;;;;;QAWtC,CAAC;QAED,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,8BAA8B;YAChE,WAAW;gBAAE,qBAAqB;YAAoB;QAC1D;QAEA,QAAQ,IAAI,CAAC,UAAU,SAAS,IAAI;QAEpC,OAAO,UAAU,MAAM;IAC3B;IAEA,MAAM,eAAe,OAAsB,EAAgB;QACvD,MAAM,kBAAkB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA6BzB,CAAC;QAED,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,iBAAiB;YACnD,WAAW;gBAAE,OAAO,QAAQ,KAAK;gBAAE,UAAU,QAAQ,QAAQ;gBAAE,OAAO,QAAQ,KAAK;YAAC;QACxF;QAEA,QAAQ,IAAI,CAAC,WAAW,SAAS,IAAI;QAErC,OAAO,UAAU,MAAM;IAC3B;AACJ"}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 173, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/customer.ts"],"sourcesContent":["import { AccountSignUp } from \"../types/accountSignUp\";\nimport { CustomerAccessTokenCreate } from \"../types/customerAccessToken\";\nimport { CustomerAccessTokenDelete } from \"../types/customerAccessTokenDelete\";\nimport { createCustomerServiceInstance } from \"./customerImpl\";\n\nexport interface CustomerService {\n    createAccessToken: (email: string, password: string) => Promise<CustomerAccessTokenCreate | undefined>;\n    deleteAccessToken: (customerAccessToken: string) => Promise<CustomerAccessTokenDelete | undefined>;\n    createCustomer: (account: AccountSignUp) => Promise<any>;\n}\n\nconst customerService: CustomerService = createCustomerServiceInstance();\nexport default customerService;\n"],"names":[],"mappings":";;;AAGA;;AAQA,MAAM,kBAAmC,CAAA,GAAA,wIAAA,CAAA,gCAA6B,AAAD;uCACtD"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/api/auth/sign-up/route.ts"],"sourcesContent":["import customerService from \"@/app/services/customer\";\nimport { CustomerCreate } from \"@/app/types/customerCreate\";\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport async function POST(request: NextRequest) {\n    const { email, password, phone } = await request.json();\n\n    const customer: CustomerCreate | undefined = await customerService.createCustomer({ email, password, phone });\n    return NextResponse.json(customer);\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,eAAe,KAAK,OAAoB;IAC3C,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,QAAQ,IAAI;IAErD,MAAM,WAAuC,MAAM,oIAAA,CAAA,UAAe,CAAC,cAAc,CAAC;QAAE;QAAO;QAAU;IAAM;IAC3G,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}