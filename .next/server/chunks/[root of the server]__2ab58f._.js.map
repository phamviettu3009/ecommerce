{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/constants/common.ts"],"sourcesContent":["export const BASE_URL = \"http://localhost:3000\";\nexport const API_URL = BASE_URL + \"/api\";\n\nexport const SIZE_PER_PAGE = 10;\n\nexport enum ProductFilterType {\n    PRICE_RANGE = \"PRICE_RANGE\",\n}\n\nexport enum ValueFilterType {\n    FILTER_PRICE = \"filter.v.price\",\n}\n\nexport enum SortProduct {\n    SELECT_OPTIONS = \"SELECT_OPTIONS\",\n    PRICE = \"PRICE\",\n    RELEVANCE = \"RELEVANCE\",\n}\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,WAAW;AACjB,MAAM,UAAU,WAAW;AAE3B,MAAM,gBAAgB;AAEtB,IAAA,AAAK,2CAAA;;WAAA;;AAIL,IAAA,AAAK,yCAAA;;WAAA;;AAIL,IAAA,AAAK,qCAAA;;;;WAAA"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/utils/filter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport ProductFilterItem, { ProductFilterValueItem } from \"../types/productFilter\";\n\nexport function replaceInputFilter(productFilterItems: ProductFilterItem[]): ProductFilterItem[] {\n    return productFilterItems.map((prodFilter) => ({\n        ...prodFilter,\n        values: prodFilter.values.map((value) => ({ ...value, input: value.input.replace(/\\\\+/g, \"\") })),\n    }));\n}\n\nexport function convertObjectToArrayFilter(input: Record<string, any>): Array<Record<string, any>> {\n    const transformedFilter: any[] = [];\n\n    Object.entries(input).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n            value.forEach((item) => {\n                transformedFilter.push({ [key]: item });\n            });\n        } else if (typeof value === \"object\" && value !== null) {\n            const subKeys = Object.keys(value);\n            const length = value[subKeys[0]].length;\n            for (let i = 0; i < length; i++) {\n                const subItem: Record<string, any> = {};\n                subKeys.forEach((subKey) => {\n                    subItem[subKey] = value[subKey][i];\n                });\n                transformedFilter.push({ [key]: subItem });\n            }\n        }\n    });\n\n    return transformedFilter;\n}\n\nexport function queryStringToObject(queryString: string): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    const params = queryString.split(\"&\");\n\n    params.forEach((param) => {\n        const [key, value] = param.split(\"=\");\n\n        // Nếu value rỗng, bỏ qua\n        if (!value) return;\n\n        const keys = key.split(\".\");\n\n        let current = result;\n        keys.forEach((k, index) => {\n            if (index === keys.length - 1) {\n                const values = value.split(\",\").filter((v) => v !== \"\");\n                if (values.length === 0) return;\n\n                if (current[k] === undefined) {\n                    current[k] = values;\n                } else if (Array.isArray(current[k])) {\n                    current[k] = [...current[k], ...values];\n                } else {\n                    current[k] = [current[k], ...values];\n                }\n            } else {\n                if (!current[k]) {\n                    current[k] = {};\n                }\n                current = current[k];\n            }\n        });\n    });\n\n    return result;\n}\n\nexport function objectToQueryString(obj: Record<string, any>, prefix: string = \"filter\"): string {\n    const queryParts: string[] = [];\n\n    for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === \"object\" && !Array.isArray(value) && value !== null) {\n            queryParts.push(objectToQueryString(value, newKey));\n        } else {\n            queryParts.push(`${newKey}=${value}`);\n        }\n    }\n\n    return queryParts.join(\"&\");\n}\n\nexport function extractFilterParams(queryString: string): string {\n    const params = new URLSearchParams(queryString);\n    const filterParams: string[] = [];\n\n    params.forEach((value, key) => {\n        if (key.startsWith(\"filter\")) {\n            filterParams.push(`${key}=${value}`);\n        }\n    });\n\n    return filterParams.join(\"&\");\n}\n\nexport function transformObject(\n    input: Record<string, any>,\n    options: {\n        asNumbers?: string[];\n        asStrings?: string[];\n    },\n): Record<string, any> {\n    if (input[\"filter\"] == undefined) {\n        return input;\n    }\n\n    const { asNumbers = [], asStrings = [] } = options;\n\n    const setValueByPath = (obj: any, path: string, transformFn: (value: any) => any) => {\n        const keys = path.split(\".\");\n        let current = obj;\n\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n\n        const lastKey = keys[keys.length - 1];\n        if (current?.[lastKey]) {\n            if (Array.isArray(current[lastKey])) {\n                current[lastKey] = current[lastKey].map((value: any) => transformFn(value));\n            } else {\n                current[lastKey] = transformFn(current[lastKey]);\n            }\n        }\n    };\n\n    const result = JSON.parse(JSON.stringify(input));\n\n    asNumbers.forEach((path) => {\n        setValueByPath(result, path, (value) => Number(value));\n    });\n\n    asStrings.forEach((path) => {\n        setValueByPath(result, path, (value) => String(value));\n    });\n\n    return result;\n}\n\nexport function convertFilterTagData(input: ProductFilterValueItem[]): ProductFilterItem[] {\n    const groupMap: Record<string, ProductFilterItem> = {};\n\n    input.forEach((item) => {\n        const [_group, _label] = item.label.split(\"__\");\n\n        const group = _label ? _group : \"tags\";\n        const label = _label ? _label : _group;\n\n        if (!groupMap[group]) {\n            groupMap[group] = {\n                id: `filter.p.${group}`,\n                label: group,\n                presentation: \"TEXT\",\n                type: \"LIST\",\n                values: [],\n            };\n        }\n\n        groupMap[group].values.push({\n            ...item,\n            label,\n        });\n    });\n\n    return Object.values(groupMap);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 230, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/storefront.ts"],"sourcesContent":["import { createStorefrontApiClient } from \"@shopify/storefront-api-client\";\n\nconst client = createStorefrontApiClient({\n    storeDomain: process.env.NEXT_PUBLIC_STORE_DOMAIN!,\n    apiVersion: process.env.NEXT_PUBLIC_API_VERSION!,\n    publicAccessToken: process.env.NEXT_PUBLIC_API_KEY!,\n});\n\nexport default client;\n"],"names":[],"mappings":";;;AAAA;AAAA;;AAEA,MAAM,SAAS,CAAA,GAAA,kMAAA,CAAA,4BAAyB,AAAD,EAAE;IACrC,WAAW;IACX,UAAU;IACV,iBAAiB;AACrB;uCAEe"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/productImpl.ts"],"sourcesContent":["import { SIZE_PER_PAGE, SortProduct } from \"../constants/common\";\nimport ListResponse from \"../types/listResponse\";\nimport Product from \"../types/product\";\nimport ProductDetail from \"../types/productDetail\";\nimport ProductFilterItem, { ProductFilterValueItem } from \"../types/productFilter\";\nimport { convertObjectToArrayFilter } from \"../utils/filter\";\nimport { ProductService } from \"./product\";\nimport client from \"./storefront\";\n\nexport function createProductServiceInstance(): ProductService {\n    return new ProductServiceImpl();\n}\n\nclass ProductServiceImpl implements ProductService {\n    async getCategories(): Promise<ProductFilterValueItem[]> {\n        const query = `\n            query Search {\n                search(first: 250, query: \"\") {\n                    productFilters {\n                        id\n                        label\n                        presentation\n                        type\n                        values {\n                            count\n                            id\n                            input\n                            label\n                            swatch {\n                                color\n                            }\n                        }\n                    }\n                }\n            }\n        `;\n\n        const response = await client.fetch(query);\n        const { data } = await response.json();\n\n        const productFilters: ProductFilterItem[] | undefined = data?.search.productFilters;\n        const productFilterItem: ProductFilterItem | undefined = productFilters?.find(\n            (item) => item.id === \"filter.p.t.category\",\n        );\n        return productFilterItem?.values ?? [];\n    }\n\n    async getProduct(handle: string): Promise<ProductDetail | null> {\n        const query: string = `\n            query Product($handle: String!) {\n                product(handle: $handle) {\n                    id\n                    handle\n                    title\n                    description\n                    descriptionHtml\n                    images(first: 10) {\n                        nodes {\n                            src\n                        }\n                    }\n                    priceRange {\n                        maxVariantPrice {\n                            amount\n                            currencyCode\n                        }\n                        minVariantPrice {\n                            amount\n                            currencyCode\n                        }\n                    }\n                    options(first: 10) {\n                        id\n                        name\n                        values\n                    }\n                    variants(first: 50) {\n                        nodes {\n                            id\n                            title\n                            price {\n                                amount\n                                currencyCode\n                            }\n                            image {\n                                src\n                            }\n                        }\n                    }\n                }\n            }\n        `;\n\n        const variables: Record<string, unknown> = {\n            handle: handle,\n        };\n\n        const response = await client.fetch(query, { variables: variables });\n        const { data } = await response.json();\n\n        const result: ProductDetail | null = data?.product;\n        return result;\n    }\n\n    async getProducts(\n        cursor: string | null,\n        keyword: string,\n        productFilter: Record<string, any>,\n        sort: SortProduct | null,\n    ): Promise<ListResponse<Product> | undefined> {\n        const filters = productFilter[\"filter\"] ? convertObjectToArrayFilter(productFilter[\"filter\"]) : [];\n\n        const query: string = `\n            query Search($keyword: String!, $first: Int!, $after: String, $filter: [ProductFilter!], $sortKey: SearchSortKeys) {\n                search(\n                    query: $keyword,\n                    first: $first,\n                    after: $after,\n                    productFilters: $filter,\n                    sortKey: $sortKey\n                ) {\n                    pageInfo {\n                        endCursor\n                        hasNextPage\n                        hasPreviousPage\n                        startCursor\n                    }\n                    nodes {\n                        ... on Product {\n                            id\n                            handle\n                            title\n                            images(first: 10) {\n                                nodes {\n                                    src\n                                }\n                            }\n                            priceRange {\n                                maxVariantPrice {\n                                    amount\n                                    currencyCode\n                                }\n                                minVariantPrice {\n                                    amount\n                                    currencyCode\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        `;\n\n        const variables: Record<string, unknown> = {\n            keyword: keyword,\n            first: SIZE_PER_PAGE,\n            after: cursor,\n            filter: filters,\n            sortKey: sort,\n        };\n\n        const response = await client.fetch(query, { variables: variables });\n        const { data } = await response.json();\n\n        const result: ListResponse<Product> | undefined = data?.search;\n        return result;\n    }\n\n    async getProductFilters(keyword: string): Promise<ProductFilterItem[]> {\n        const query = `\n            query Search($keyword: String!) {\n                search(first: 250, query: $keyword) {\n                    productFilters {\n                        id\n                        label\n                        presentation\n                        type\n                        values {\n                            count\n                            id\n                            input\n                            label\n                            swatch {\n                                color\n                            }\n                        }\n                    }\n                }\n            }\n        `;\n\n        const variables: Record<string, unknown> = {\n            keyword: keyword,\n        };\n\n        const response = await client.fetch(query, {\n            variables: variables,\n        });\n        const { data } = await response.json();\n\n        const result: ProductFilterItem[] | undefined = data?.search.productFilters;\n        return result ?? [];\n    }\n}\n"],"names":[],"mappings":";;;AAAA;AAKA;AAEA;;;;AAEO,SAAS;IACZ,OAAO,IAAI;AACf;AAEA,MAAM;IACF,MAAM,gBAAmD;QACrD,MAAM,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;QAoBf,CAAC;QAED,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,KAAK,CAAC;QACpC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,MAAM,iBAAkD,MAAM,OAAO;QACrE,MAAM,oBAAmD,gBAAgB,KACrE,CAAC,OAAS,KAAK,EAAE,KAAK;QAE1B,OAAO,mBAAmB,UAAU,EAAE;IAC1C;IAEA,MAAM,WAAW,MAAc,EAAiC;QAC5D,MAAM,QAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QA2CvB,CAAC;QAED,MAAM,YAAqC;YACvC,QAAQ;QACZ;QAEA,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,KAAK,CAAC,OAAO;YAAE,WAAW;QAAU;QAClE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,MAAM,SAA+B,MAAM;QAC3C,OAAO;IACX;IAEA,MAAM,YACF,MAAqB,EACrB,OAAe,EACf,aAAkC,EAClC,IAAwB,EACkB;QAC1C,MAAM,UAAU,aAAa,CAAC,SAAS,GAAG,CAAA,GAAA,+HAAA,CAAA,6BAA0B,AAAD,EAAE,aAAa,CAAC,SAAS,IAAI,EAAE;QAElG,MAAM,QAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAuCvB,CAAC;QAED,MAAM,YAAqC;YACvC,SAAS;YACT,OAAO,mIAAA,CAAA,gBAAa;YACpB,OAAO;YACP,QAAQ;YACR,SAAS;QACb;QAEA,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,KAAK,CAAC,OAAO;YAAE,WAAW;QAAU;QAClE,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,MAAM,SAA4C,MAAM;QACxD,OAAO;IACX;IAEA,MAAM,kBAAkB,OAAe,EAAgC;QACnE,MAAM,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;QAoBf,CAAC;QAED,MAAM,YAAqC;YACvC,SAAS;QACb;QAEA,MAAM,WAAW,MAAM,sIAAA,CAAA,UAAM,CAAC,KAAK,CAAC,OAAO;YACvC,WAAW;QACf;QACA,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,SAAS,IAAI;QAEpC,MAAM,SAA0C,MAAM,OAAO;QAC7D,OAAO,UAAU,EAAE;IACvB;AACJ"}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 445, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/product.ts"],"sourcesContent":["import { SortProduct } from \"../constants/common\";\nimport ListResponse from \"../types/listResponse\";\nimport Product from \"../types/product\";\nimport ProductDetail from \"../types/productDetail\";\nimport ProductFilterItem, { ProductFilterValueItem } from \"../types/productFilter\";\nimport { createProductServiceInstance } from \"./productImpl\";\n\nexport interface ProductService {\n    getCategories: () => Promise<ProductFilterValueItem[]>;\n    getProduct: (handle: string) => Promise<ProductDetail | null>;\n    getProducts: (\n        cursor: string | null,\n        keyword: string,\n        productFilter: Record<string, any>,\n        sort: SortProduct | null,\n    ) => Promise<ListResponse<Product> | undefined>;\n    getProductFilters: (keyword: string) => Promise<ProductFilterItem[]>;\n}\n\nconst productService: ProductService = createProductServiceInstance();\nexport default productService;\n"],"names":[],"mappings":";;;AAKA;;AAcA,MAAM,iBAAiC,CAAA,GAAA,uIAAA,CAAA,+BAA4B,AAAD;uCACnD"}},
    {"offset": {"line": 452, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/api/products/filter/route.ts"],"sourcesContent":["import productService from \"@/app/services/product\";\nimport ProductFilterItem from \"@/app/types/productFilter\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n    const { searchParams } = new URL(request.url);\n    const searchKeyword: string | null = searchParams.get(\"search\") ?? \"\";\n\n    const productFilters: ProductFilterItem[] = await productService.getProductFilters(searchKeyword);\n    return NextResponse.json(productFilters);\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,eAAe,IAAI,OAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,gBAA+B,aAAa,GAAG,CAAC,aAAa;IAEnE,MAAM,iBAAsC,MAAM,mIAAA,CAAA,UAAc,CAAC,iBAAiB,CAAC;IACnF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B"}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}