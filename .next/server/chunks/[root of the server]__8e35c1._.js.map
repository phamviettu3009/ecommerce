{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/utils/filter.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport ProductFilterItem, { ProductFilterValueItem } from \"../types/productFilter\";\n\nexport function replaceInputFilter(productFilterItems: ProductFilterItem[]): ProductFilterItem[] {\n    return productFilterItems.map((prodFilter) => ({\n        ...prodFilter,\n        values: prodFilter.values.map((value) => ({ ...value, input: value.input.replace(/\\\\+/g, \"\") })),\n    }));\n}\n\nexport function convertObjectToArrayFilter(input: Record<string, any>): Array<Record<string, any>> {\n    const transformedFilter: any[] = [];\n\n    Object.entries(input).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n            value.forEach((item) => {\n                transformedFilter.push({ [key]: item });\n            });\n        } else if (typeof value === \"object\" && value !== null) {\n            const subKeys = Object.keys(value);\n            const length = value[subKeys[0]].length;\n            for (let i = 0; i < length; i++) {\n                const subItem: Record<string, any> = {};\n                subKeys.forEach((subKey) => {\n                    subItem[subKey] = value[subKey][i];\n                });\n                transformedFilter.push({ [key]: subItem });\n            }\n        }\n    });\n\n    return transformedFilter;\n}\n\nexport function queryStringToObject(queryString: string): Record<string, any> {\n    const result: Record<string, any> = {};\n\n    const params = queryString.split(\"&\");\n\n    params.forEach((param) => {\n        const [key, value] = param.split(\"=\");\n\n        // Nếu value rỗng, bỏ qua\n        if (!value) return;\n\n        const keys = key.split(\".\");\n\n        let current = result;\n        keys.forEach((k, index) => {\n            if (index === keys.length - 1) {\n                const values = value.split(\",\").filter((v) => v !== \"\");\n                if (values.length === 0) return;\n\n                if (current[k] === undefined) {\n                    current[k] = values;\n                } else if (Array.isArray(current[k])) {\n                    current[k] = [...current[k], ...values];\n                } else {\n                    current[k] = [current[k], ...values];\n                }\n            } else {\n                if (!current[k]) {\n                    current[k] = {};\n                }\n                current = current[k];\n            }\n        });\n    });\n\n    return result;\n}\n\nexport function objectToQueryString(obj: Record<string, any>, prefix: string = \"filter\"): string {\n    const queryParts: string[] = [];\n\n    for (const [key, value] of Object.entries(obj)) {\n        const newKey = prefix ? `${prefix}.${key}` : key;\n\n        if (typeof value === \"object\" && !Array.isArray(value) && value !== null) {\n            queryParts.push(objectToQueryString(value, newKey));\n        } else {\n            queryParts.push(`${newKey}=${value}`);\n        }\n    }\n\n    return queryParts.join(\"&\");\n}\n\nexport function extractFilterParams(queryString: string): string {\n    const params = new URLSearchParams(queryString);\n    const filterParams: string[] = [];\n\n    params.forEach((value, key) => {\n        if (key.startsWith(\"filter\")) {\n            filterParams.push(`${key}=${value}`);\n        }\n    });\n\n    return filterParams.join(\"&\");\n}\n\nexport function transformObject(\n    input: Record<string, any>,\n    options: {\n        asNumbers?: string[];\n        asStrings?: string[];\n    },\n): Record<string, any> {\n    if (input[\"filter\"] == undefined) {\n        return input;\n    }\n\n    const { asNumbers = [], asStrings = [] } = options;\n\n    const setValueByPath = (obj: any, path: string, transformFn: (value: any) => any) => {\n        const keys = path.split(\".\");\n        let current = obj;\n\n        for (let i = 0; i < keys.length - 1; i++) {\n            current = current[keys[i]];\n        }\n\n        const lastKey = keys[keys.length - 1];\n        if (current?.[lastKey]) {\n            if (Array.isArray(current[lastKey])) {\n                current[lastKey] = current[lastKey].map((value: any) => transformFn(value));\n            } else {\n                current[lastKey] = transformFn(current[lastKey]);\n            }\n        }\n    };\n\n    const result = JSON.parse(JSON.stringify(input));\n\n    asNumbers.forEach((path) => {\n        setValueByPath(result, path, (value) => Number(value));\n    });\n\n    asStrings.forEach((path) => {\n        setValueByPath(result, path, (value) => String(value));\n    });\n\n    return result;\n}\n\nexport function convertFilterTagData(input: ProductFilterValueItem[]): ProductFilterItem[] {\n    const groupMap: Record<string, ProductFilterItem> = {};\n\n    input.forEach((item) => {\n        const [_group, _label] = item.label.split(\"__\");\n\n        const group = _label ? _group : \"tags\";\n        const label = _label ? _label : _group;\n\n        if (!groupMap[group]) {\n            groupMap[group] = {\n                id: `filter.p.${group}`,\n                label: group,\n                presentation: \"TEXT\",\n                type: \"LIST\",\n                values: [],\n            };\n        }\n\n        groupMap[group].values.push({\n            ...item,\n            label,\n        });\n    });\n\n    return Object.values(groupMap);\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 206, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 212, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/api/products/route.ts"],"sourcesContent":["import { SortProduct } from \"@/app/constants/common\";\nimport productService from \"@/app/services/server/product\";\nimport ListResponse from \"@/app/types/listResponse\";\nimport Product from \"@/app/types/product\";\nimport { extractFilterParams, queryStringToObject, transformObject } from \"@/app/utils/filter\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n    const { searchParams } = new URL(request.url);\n    const searchKeyword: string | null = searchParams.get(\"search\") ?? \"\";\n\n    const filterParams: string = extractFilterParams(searchParams.toString());\n    const filterVariables: Record<string, any> = queryStringToObject(filterParams);\n    const sortParams: SortProduct | null = searchParams.get(\"sort\") as SortProduct;\n    const cursor: string | null = searchParams.get(\"cursor\");\n\n    const transformFilterVariables: Record<string, any> = transformObject(filterVariables, {\n        asNumbers: [\"filter.price.min\", \"filter.price.max\"],\n    });\n\n    const response: ListResponse<Product> | undefined = await productService.getProducts(\n        cursor,\n        searchKeyword,\n        transformFilterVariables,\n        sortParams,\n    );\n\n    return NextResponse.json(response);\n}\n"],"names":[],"mappings":";;;AACA;AAGA;AACA;;;;AAEO,eAAe,IAAI,OAAgB;IACtC,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;IAC5C,MAAM,gBAA+B,aAAa,GAAG,CAAC,aAAa;IAEnE,MAAM,eAAuB,CAAA,GAAA,+HAAA,CAAA,sBAAmB,AAAD,EAAE,aAAa,QAAQ;IACtE,MAAM,kBAAuC,CAAA,GAAA,+HAAA,CAAA,sBAAmB,AAAD,EAAE;IACjE,MAAM,aAAiC,aAAa,GAAG,CAAC;IACxD,MAAM,SAAwB,aAAa,GAAG,CAAC;IAE/C,MAAM,2BAAgD,CAAA,GAAA,+HAAA,CAAA,kBAAe,AAAD,EAAE,iBAAiB;QACnF,WAAW;YAAC;YAAoB;SAAmB;IACvD;IAEA,MAAM,WAA8C,MAAM,6IAAA,CAAA,UAAc,CAAC,WAAW,CAChF,QACA,eACA,0BACA;IAGJ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC7B"}},
    {"offset": {"line": 237, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}