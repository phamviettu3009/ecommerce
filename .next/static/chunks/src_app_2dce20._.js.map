{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/auth/styles.module.scss.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"form\": \"styles-module-scss-module__yKohkW__form\",\n  \"page\": \"styles-module-scss-module__yKohkW__page\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA"}},
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/customerImpl.ts"],"sourcesContent":["import CustomerAccessToken from \"../types/customerAccessToken\";\nimport { CustomerService } from \"./customer\";\nimport client from \"./storefront\";\n\nexport function createCustomerServiceInstance(): CustomerService {\n    return new CustomerServiceImpl();\n}\n\nclass CustomerServiceImpl implements CustomerService {\n    async createAccessToken(email: string, password: string): Promise<CustomerAccessToken | undefined> {\n        const CUSTOMER_ACCESS_TOKEN_CREATE = `\n            mutation CustomerAccessTokenCreate($email: String!, $password: String!) {\n                customerAccessTokenCreate(\n                    input: { email: $email, password: $password }\n                ) {\n                    customerAccessToken {\n                        accessToken\n                        expiresAt\n                    }\n                    customerUserErrors {\n                        code\n                        field\n                        message\n                    }\n                    userErrors {\n                        field\n                        message\n                    }\n                }\n            }\n        `;\n\n        const response = await client.request<CustomerAccessToken>(CUSTOMER_ACCESS_TOKEN_CREATE, {\n            variables: { email, password },\n        });\n        return response.data;\n    }\n}\n"],"names":[],"mappings":";;;AAEA;;AAEO,SAAS;IACZ,OAAO,IAAI;AACf;AAEA,MAAM;IACF,MAAM,kBAAkB,KAAa,EAAE,QAAgB,EAA4C;QAC/F,MAAM,+BAA+B,CAAC;;;;;;;;;;;;;;;;;;;;QAoBtC,CAAC;QAED,MAAM,WAAW,MAAM,uIAAA,CAAA,UAAM,CAAC,OAAO,CAAsB,8BAA8B;YACrF,WAAW;gBAAE;gBAAO;YAAS;QACjC;QACA,OAAO,SAAS,IAAI;IACxB;AACJ"}},
    {"offset": {"line": 59, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/services/customer.ts"],"sourcesContent":["import CustomerAccessToken from \"../types/customerAccessToken\";\nimport { createCustomerServiceInstance } from \"./customerImpl\";\n\nexport interface CustomerService {\n    createAccessToken: (email: string, password: string) => Promise<CustomerAccessToken | undefined>;\n}\n\nconst customerService: CustomerService = createCustomerServiceInstance();\nexport default customerService;\n"],"names":[],"mappings":";;;AACA;;AAMA,MAAM,kBAAmC,CAAA,GAAA,yIAAA,CAAA,gCAA6B,AAAD;uCACtD"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file:///Users/macad/Documents/Project/nextjs/ecommerce/src/app/auth/page.tsx"],"sourcesContent":["\"use client\";\n\nimport { useSession, signIn, signOut } from \"next-auth/react\";\nimport styles from \"./styles.module.scss\";\nimport { Button, Divider, FormControl, FormLabel, TextField } from \"@mui/material\";\nimport { Fragment } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport EmailPassword from \"../types/emailPassword\";\nimport customerService from \"../services/customer\";\nimport CustomerAccessToken from \"../types/customerAccessToken\";\n\nfunction AuthScreen() {\n    const { data: session } = useSession();\n\n    const { control, handleSubmit } = useForm<EmailPassword>({\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n        },\n    });\n\n    const handleLogin = handleSubmit(async (data: EmailPassword): Promise<void> => {\n        try {\n            const response: CustomerAccessToken | undefined = await fetch\n            console.info(\"response\", response);\n        } catch (error) {\n            console.error(\"Login failed\", error);\n        }\n    });\n\n    return (\n        <div className={styles[\"page\"]}>\n            <FormControl className={styles[\"form\"]}>\n                {session ? (\n                    <Fragment>\n                        <p>Welcome, {session.user?.name}</p>\n                        <Button fullWidth variant=\"contained\" onClick={() => signOut()}>\n                            Sign Out\n                        </Button>\n                    </Fragment>\n                ) : (\n                    <Fragment>\n                        <FormLabel className=\"align-self-center fs-4 fw-bold\">Sign In</FormLabel>\n                        <Controller\n                            name=\"email\"\n                            control={control}\n                            render={({ field }) => (\n                                <TextField {...field} id=\"standard-adornment-email\" label=\"Email\" variant=\"standard\" />\n                            )}\n                        />\n                        <Controller\n                            name=\"password\"\n                            control={control}\n                            render={({ field }) => (\n                                <TextField\n                                    {...field}\n                                    id=\"standard-adornment-password\"\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    variant=\"standard\"\n                                />\n                            )}\n                        />\n                        <Button className=\"mt-3\" variant=\"contained\" fullWidth onClick={handleLogin}>\n                            Sign In\n                        </Button>\n                        <Divider>OR</Divider>\n                        <Button\n                            variant=\"outlined\"\n                            fullWidth\n                            onClick={() => signIn(\"google\", { callbackUrl: \"http://localhost:3000\" })}\n                        >\n                            Sign In with Google\n                        </Button>\n                    </Fragment>\n                )}\n            </FormControl>\n        </div>\n    );\n}\n\nexport default AuthScreen;\n"],"names":[],"mappings":";;;;AAEA;AACA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;;;AAJA;;;;;;AAWA,SAAS;;IACL,MAAM,EAAE,MAAM,OAAO,EAAE,GAAG,CAAA,GAAA,iJAAA,CAAA,aAAU,AAAD;IAEnC,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAiB;QACrD,eAAe;YACX,OAAO;YACP,UAAU;QACd;IACJ;IAEA,MAAM,cAAc,aAAa,OAAO;QACpC,IAAI;YACA,MAAM,WAA4C,MAAM;YACxD,QAAQ,IAAI,CAAC,YAAY;QAC7B,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,gBAAgB;QAClC;IACJ;IAEA,qBACI,6LAAC;QAAI,WAAW,6JAAA,CAAA,UAAM,CAAC,OAAO;kBAC1B,cAAA,6LAAC,4MAAA,CAAA,cAAW;YAAC,WAAW,6JAAA,CAAA,UAAM,CAAC,OAAO;sBACjC,wBACG,6LAAC,6JAAA,CAAA,WAAQ;;kCACL,6LAAC;;4BAAE;4BAAU,QAAQ,IAAI,EAAE;;;;;;;kCAC3B,6LAAC,6LAAA,CAAA,SAAM;wBAAC,SAAS;wBAAC,SAAQ;wBAAY,SAAS,IAAM,CAAA,GAAA,iJAAA,CAAA,UAAO,AAAD;kCAAK;;;;;;;;;;;qCAKpE,6LAAC,6JAAA,CAAA,WAAQ;;kCACL,6LAAC,sMAAA,CAAA,YAAS;wBAAC,WAAU;kCAAiC;;;;;;kCACtD,6LAAC,iKAAA,CAAA,aAAU;wBACP,MAAK;wBACL,SAAS;wBACT,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,sMAAA,CAAA,YAAS;gCAAE,GAAG,KAAK;gCAAE,IAAG;gCAA2B,OAAM;gCAAQ,SAAQ;;;;;;;;;;;kCAGlF,6LAAC,iKAAA,CAAA,aAAU;wBACP,MAAK;wBACL,SAAS;wBACT,QAAQ,CAAC,EAAE,KAAK,EAAE,iBACd,6LAAC,sMAAA,CAAA,YAAS;gCACL,GAAG,KAAK;gCACT,IAAG;gCACH,MAAK;gCACL,OAAM;gCACN,SAAQ;;;;;;;;;;;kCAIpB,6LAAC,6LAAA,CAAA,SAAM;wBAAC,WAAU;wBAAO,SAAQ;wBAAY,SAAS;wBAAC,SAAS;kCAAa;;;;;;kCAG7E,6LAAC,gMAAA,CAAA,UAAO;kCAAC;;;;;;kCACT,6LAAC,6LAAA,CAAA,SAAM;wBACH,SAAQ;wBACR,SAAS;wBACT,SAAS,IAAM,CAAA,GAAA,iJAAA,CAAA,SAAM,AAAD,EAAE,UAAU;gCAAE,aAAa;4BAAwB;kCAC1E;;;;;;;;;;;;;;;;;;;;;;AAQzB;GApES;;QACqB,iJAAA,CAAA,aAAU;QAEF,iKAAA,CAAA,UAAO;;;KAHpC;uCAsEM"}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}